import{A as o}from"./index-Ck2EgO-1.js";const a=()=>{const r=localStorage.getItem("token");return{"Content-Type":"application/json",...r&&{Authorization:`Bearer ${r}`}}},h={getProfile:async()=>{try{const r=await fetch(`${o}/user/profile`,{method:"GET",headers:a()}),e=await r.json();if(!r.ok)throw new Error(e.message||"Failed to fetch profile");return e}catch(r){throw console.error("Get profile error:",r),r}},updateProfile:async r=>{try{const e=await fetch(`${o}/user/profile`,{method:"PUT",headers:a(),body:JSON.stringify(r)}),t=await e.json();if(!e.ok)throw new Error(t.message||"Failed to update profile");return t.user&&localStorage.setItem("user",JSON.stringify(t.user)),t}catch(e){throw console.error("Update profile error:",e),e}},getDashboard:async()=>{try{const r=await fetch(`${o}/user/dashboard`,{method:"GET",headers:a()}),e=await r.json();if(!r.ok)throw new Error(e.message||"Failed to fetch dashboard data");return e}catch(r){throw console.error("Get dashboard error:",r),r}},getApplications:async()=>{try{const r=await fetch(`${o}/user/applications`,{method:"GET",headers:a()}),e=await r.json();if(!r.ok)throw new Error(e.message||"Failed to fetch applications");return e}catch(r){throw console.error("Get applications error:",r),r}},getApplicationById:async r=>{try{const e=await fetch(`${o}/user/applications/${r}`,{method:"GET",headers:a()}),t=await e.json();if(!e.ok)throw new Error(t.message||"Failed to fetch application");return t}catch(e){throw console.error("Get application error:",e),e}},getServiceRequests:async()=>{try{const r=await fetch(`${o}/user/services`,{method:"GET",headers:a()}),e=await r.json();if(!r.ok)throw new Error(e.message||"Failed to fetch service requests");return e}catch(r){throw console.error("Get service requests error:",r),r}},getServiceRequestById:async r=>{try{const e=await fetch(`${o}/user/services/${r}`,{method:"GET",headers:a()}),t=await e.json();if(!e.ok)throw new Error(t.message||"Failed to fetch service request");return t}catch(e){throw console.error("Get service request error:",e),e}},getReviews:async()=>{try{const r=await fetch(`${o}/user/reviews`,{method:"GET",headers:a()}),e=await r.json();if(!r.ok)throw new Error(e.message||"Failed to fetch reviews");return e}catch(r){throw console.error("Get reviews error:",r),r}},addReview:async r=>{try{const e=await fetch(`${o}/user/reviews`,{method:"POST",headers:a(),body:JSON.stringify(r)}),t=await e.json();if(!e.ok)throw new Error(t.message||"Failed to add review");return t}catch(e){throw console.error("Add review error:",e),e}},updateReview:async(r,e)=>{try{const t=await fetch(`${o}/user/reviews/${r}`,{method:"PUT",headers:a(),body:JSON.stringify(e)}),s=await t.json();if(!t.ok)throw new Error(s.message||"Failed to update review");return s}catch(t){throw console.error("Update review error:",t),t}},deleteReview:async r=>{try{const e=await fetch(`${o}/user/reviews/${r}`,{method:"DELETE",headers:a()}),t=await e.json();if(!e.ok)throw new Error(t.message||"Failed to delete review");return t}catch(e){throw console.error("Delete review error:",e),e}},uploadProfilePicture:async r=>{try{const e=new FormData;e.append("profilePicture",r);const t=localStorage.getItem("token"),s={};t&&(s.Authorization=`Bearer ${t}`);const i=await fetch(`${o}/user/upload-profile-picture`,{method:"POST",headers:s,body:e}),n=await i.json();if(!i.ok)throw new Error(n.message||"Failed to upload profile picture");return n.user&&localStorage.setItem("user",JSON.stringify(n.user)),n}catch(e){throw console.error("Upload profile picture error:",e),e}}};export{h as u};
